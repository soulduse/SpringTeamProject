<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="Data">
	<typeAlias alias="bbsView" type="com.listen.bbs.vo.BbsVo" />
	<typeAlias alias="bbsLikeSwitchDto" type="com.listen.bbs.dto.BbsLikeSwitchDto" />
	<typeAlias alias="bbsViewFilterDto" type="com.listen.bbs.dto.BbsViewFilterDto" />

	<typeAlias alias="ynFilterVo" type="com.listen.bbs.vo.YnFilterVo" />
	<typeAlias alias="bbsSelectViewVo" type="com.listen.bbs.vo.BbsSelectViewVo" />
	<typeAlias alias="cloverCheck" type="com.listen.member.vo.MemberVo" />

	<select id="bbsViewList" resultClass="bbsView">
		SELECT A.BBS_SEQ,
		A.BG_IMG_SEQ, A.BBS_CONTENTS, A.BBS_HITCOUNT, A.GOODCOUNT,
		A.REG_EMAIL, B.PATH, B.SAVE_NAME
		FROM BBS A, BACKGROUND_IMG B
		WHERE
		A.DISPYN='Y'AND A.BG_IMG_SEQ = B.BG_IMG_SEQ
		ORDER BY A.BBS_SEQ DESC
	</select>

	<!-- 글보기시 YN_FILTER INSERT Query -->
	<insert id="bbsViewInsertFilter" parameterClass="bbsViewFilterDto">
		INSERT INTO
		YN_FILTER
		(FILTER_SEQ, BBS_SEQ, MEMBERS_SEQ, FILTER_COUNT_SEQ)
		VALUES
		(FILTER_SEQ.NEXTVAL, #bbs_seq#,
		(SELECT MEMBERS_SEQ FROM MEMBERS WHERE
		EMAIL=#reg_email#),
		FILTER_COUNT_SEQ.NEXTVAL)
	</insert>

	<!-- 글보기 INSERT 전 Query -->
	<update id="bbsViewUpdateFilter" parameterClass="bbsViewFilterDto">
		UPDATE YN_FILTER SET
		FILTER_COUNT_SEQ = FILTER_COUNT_SEQ.NEXTVAL
		WHERE BBS_SEQ = #bbs_seq# AND
		MEMBERS_SEQ = (SELECT MEMBERS_SEQ FROM MEMBERS WHERE EMAIL=#reg_email#)
	</update>

	<!-- 글을 볼때 Ajax 형식으로 데이터 가져오기 -->
	<select id="bbsSelectView" resultClass="bbsSelectViewVo"
		parameterClass="bbsViewFilterDto">
		SELECT
		a.BBS_GOOD_YN, a.BBS_ADD_GOOD_YN, a.BBS_SEQ,
		b.BBS_CONTENTS, b.BBS_HITCOUNT, b.GOODCOUNT, b.REG_EMAIL,
		TO_CHAR(b.REG_DATE,
		'YYYY-MM-DD HH:MI:SS') REG_DATE,
		c.PATH, c.SAVE_NAME
		FROM
		YN_FILTER a, BBS b, BACKGROUND_IMG c
		WHERE
		a.BBS_SEQ = b.BBS_SEQ AND
		b.DISPYN='Y'
		AND b.BG_IMG_SEQ = c.BG_IMG_SEQ AND
		b.BBS_INFO_SEQ = 2 AND b.BBS_SEQ = #bbs_seq#
		AND a.MEMBERS_SEQ =
		(SELECT MEMBERS_SEQ FROM MEMBERS WHERE EMAIL = #reg_email#)
	</select>

   <select id="bbsViewList2" resultClass="bbsView" parameterClass="bbsView">
      select *
from 
(select rownum rn, z.*
from (SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.REG_EMAIL, A.BBS_HITCOUNT, A.GOODCOUNT, A.MEMBERS_SEQ, 
nvl(b.add_count,0) add_count, 
case 
when nvl(a.bbs_file_seq,0) != 0
then (select path from bbs d, bbs_file e where d.bbs_file_seq = e.bbs_file_seq and a.bbs_seq = d.bbs_seq)
when nvl(a.bbs_file_seq,0) = 0
then (select path from bbs f, background_img g where f.bg_img_seq = g.bg_img_seq and a.bbs_seq = f.bbs_seq)
end as path,
case 
when nvl(a.bbs_file_seq,0) != 0
then (select save_name from bbs c, bbs_file d where c.bbs_file_seq = d.bbs_file_seq and a.bbs_seq = c.bbs_seq)
when nvl(a.bbs_file_seq,0) = 0
then (select save_name from bbs e, background_img f where e.bg_img_seq = f.bg_img_seq and a.bbs_seq = e.bbs_seq)
end as save_name, nvl(y.bbs_good_yn,'N') bbs_good_yn

FROM BBS A, (SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY BBS_SEQ ) B, BACKGROUND_IMG C, (select distinct bbs_seq, bbs_good_yn from yn_filter where members_seq =(select members_seq from members where email=#reg_email#)) y
WHERE A.BBS_SEQ = B.BBS_SEQ(+) AND A.DISPYN='Y'AND A.BG_IMG_SEQ = C.BG_IMG_SEQ and y.bbs_seq(+) = a.bbs_seq
ORDER BY A.BBS_SEQ DESC) z)

WHERE RN > #no# AND #no#+10 > RN

   </select>


   <select id="bbsDetailView" resultClass="bbsView" parameterClass="bbsView">
      <dynamic>
         <isEqual property="selectItem" compareValue="bbs_add_count">
            SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.REG_EMAIL,
            A.BBS_HITCOUNT, A.GOODCOUNT, A.MEMBERS_SEQ, nvl(b.add_count,0)
            add_count, C.PATH, C.SAVE_NAME
            FROM BBS A, (SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY
            BBS_SEQ ) B, BACKGROUND_IMG C
            WHERE A.BBS_SEQ = B.BBS_SEQ(+) AND A.DISPYN='Y'AND A.BG_IMG_SEQ =
            C.BG_IMG_SEQ and a.bbs_hitcount != 0
            ORDER BY ADD_COUNT DESC
         </isEqual>
         <isEqual property="selectItem" compareValue="goodCount">
            SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.BBS_HITCOUNT,
            A.REG_EMAIL, B.PATH, B.SAVE_NAME, A.GOODCOUNT, nvl(c.add_count,0)
            add_count
            FROM BBS A, BACKGROUND_IMG B,(SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM
            BBS_ADD GROUP BY BBS_SEQ ) c
            WHERE A.DISPYN='Y'AND A.BG_IMG_SEQ = B.BG_IMG_SEQ and a.bbs_seq =
            c.bbs_seq(+) and a.bbs_hitcount != 0
            ORDER BY a.GOODCOUNT DESC
         </isEqual>
         <isEqual property="selectItem" compareValue="bbs_hitCount">
            SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.BBS_HITCOUNT,
            A.REG_EMAIL, B.PATH, B.SAVE_NAME, A.GOODCOUNT, nvl(c.add_count,0)
            add_count
            FROM BBS A, BACKGROUND_IMG B,(SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM
            BBS_ADD GROUP BY BBS_SEQ ) c
            WHERE A.DISPYN='Y'AND A.BG_IMG_SEQ = B.BG_IMG_SEQ and a.bbs_seq =
            c.bbs_seq(+) and a.bbs_hitcount != 0
            ORDER BY a.bbs_hitcount DESC
         </isEqual>
         <isEqual property="selectItem" compareValue="main">
            SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.REG_EMAIL,
            A.BBS_HITCOUNT, A.GOODCOUNT, A.MEMBERS_SEQ, nvl(b.add_count,0)
            add_count, C.PATH, C.SAVE_NAME
            FROM BBS A, (SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY
            BBS_SEQ ) B, BACKGROUND_IMG C
            WHERE A.BBS_SEQ = B.BBS_SEQ(+) AND A.DISPYN='Y'AND A.BG_IMG_SEQ =
            C.BG_IMG_SEQ
            ORDER BY A.BBS_SEQ DESC
         </isEqual>
         <isEqual property="selectItem" compareValue="weekBest">
            SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.REG_EMAIL,
            A.BBS_HITCOUNT, A.GOODCOUNT, A.MEMBERS_SEQ, nvl(b.add_count,0)
            add_count, C.PATH, C.SAVE_NAME
            FROM BBS A, (SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY
            BBS_SEQ ) B, BACKGROUND_IMG C
            WHERE A.BBS_SEQ = B.BBS_SEQ(+) AND A.DISPYN='Y' and a.bbs_hitcount != 0
            AND A.BG_IMG_SEQ = C.BG_IMG_SEQ and 8 > to_char(sysdate,'dd')-
            to_char(a.reg_date,'dd')
            ORDER BY A.BBS_SEQ DESC
         </isEqual>
         <isEqual property="selectItem" compareValue="monthBest">
            SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.BBS_HITCOUNT,
            A.REG_EMAIL, B.PATH, B.SAVE_NAME, A.GOODCOUNT, nvl(c.add_count,0)
            add_count
            FROM BBS A, BACKGROUND_IMG B,(SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM
            BBS_ADD GROUP BY BBS_SEQ ) c
            WHERE A.DISPYN='Y'AND A.BG_IMG_SEQ = B.BG_IMG_SEQ and a.bbs_hitcount != 0
            and a.bbs_seq = c.bbs_seq(+) and
            to_char(months_between(sysdate,a.reg_date),9) = 0
            ORDER BY a.bbs_hitcount DESC
         </isEqual>
      </dynamic>
   </select>

	<!-- 글공감 Like Update 처리 #1 -->
	<update id="likeCountUpdate" parameterClass="bbsLikeSwitchDto">
		UPDATE BBS SET
		GOODCOUNT = #likeValue#
		WHERE BBS_SEQ = #bbs_seq#
	</update>

	<!-- 글 공감 INSERT 전 UPDATE를 통한 YNFILTER CHECK -->
	<update id="checkYnFilter" parameterClass="bbsLikeSwitchDto">
		UPDATE YN_FILTER SET
		<dynamic>
			<isEqual property="bbs_good_yn" compareValue="Y">
				BBS_GOOD_YN =
				'Y'
			</isEqual>
			<isEqual property="bbs_good_yn" compareValue="N">
				BBS_GOOD_YN =
				'N'
			</isEqual>
		</dynamic>
		WHERE BBS_SEQ = #bbs_seq# AND
		MEMBERS_SEQ = (SELECT MEMBERS_SEQ FROM
		MEMBERS WHERE EMAIL=#reg_email#)
	</update>

	<!-- 글공감 Like Update 처리 #2 -->
	<insert id="BbsLikeYnFilter" parameterClass="bbsLikeSwitchDto">
		INSERT INTO
		YN_FILTER
		(FILTER_SEQ, BBS_SEQ, MEMBERS_SEQ, BBS_GOOD_YN)
		VALUES
		(FILTER_SEQ.NEXTVAL, #bbs_seq#,
		(SELECT MEMBERS_SEQ FROM MEMBERS WHERE
		EMAIL=#reg_email#),
		#bbs_good_yn#)
	</insert>


   <select id="bbsMyViewList" resultClass="bbsView" parameterClass="bbsView">
      SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.BBS_HITCOUNT, A.REG_EMAIL, A.DISPYN, B.PATH, B.SAVE_NAME
      FROM BBS A, BACKGROUND_IMG B
      WHERE  A.BG_IMG_SEQ = B.BG_IMG_SEQ
      AND A.REG_EMAIL = #reg_email#
      ORDER BY A.BBS_SEQ DESC
   </select>

	<select id="mainMyStory" resultClass="bbsView" parameterClass="bbsView">
   <![CDATA[
      select rownum ,A.*
      from (select A.BBS_SEQ,A.BG_IMG_SEQ, A.BBS_CONTENTS, A.GOODCOUNT,A.BBS_HITCOUNT, A.REG_EMAIL, A.DISPYN, A.REG_DATE, B.PATH, B.SAVE_NAME, nvl(c.add_count,0) add_count
      from BBS A, BACKGROUND_IMG B,(SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY BBS_SEQ ) c 
      where a.bg_img_seq = b.bg_img_seq and a.bbs_seq = c.bbs_seq(+) and A.reg_email = #reg_email#  order by A.BBS_SEQ desc) A
      where rownum > 0 and rownum < 3]]>
	</select>

	<!-- 메인에서 연령별 선택 쿼리 -->
	<select id="bbsAgeList" resultClass="bbsView" parameterClass="bbsView">
		SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.BBS_HITCOUNT,
		A.REG_EMAIL, B.PATH, B.SAVE_NAME, A.GOODCOUNT, nvl(c.add_count,0)
		add_count,
		EXTRACT(YEAR FROM SYSDATE)-d.birthyear+1 age
		FROM BBS A,
		BACKGROUND_IMG B,(SELECT
		BBS_SEQ, COUNT(*)ADD_COUNT FROM BBS_ADD GROUP
		BY BBS_SEQ ) c, members
		d
		WHERE A.DISPYN='Y'AND A.BG_IMG_SEQ =
		B.BG_IMG_SEQ and a.bbs_seq =
		c.bbs_seq(+) and a.reg_email = d.email
		<dynamic>
			<isEqual property="selectAge" compareValue="10">
				and EXTRACT(YEAR
				FROM SYSDATE)-d.birthyear+1 > 9 and 20 > EXTRACT(YEAR FROM
				SYSDATE)-d.birthyear+1
			</isEqual>
			<isEqual property="selectAge" compareValue="20">
				and EXTRACT(YEAR
				FROM SYSDATE)-d.birthyear+1 > 19 and 30 > EXTRACT(YEAR FROM
				SYSDATE)-d.birthyear+1
			</isEqual>
			<isEqual property="selectAge" compareValue="30">
				and EXTRACT(YEAR
				FROM SYSDATE)-d.birthyear+1 > 29 and 40 > EXTRACT(YEAR FROM
				SYSDATE)-d.birthyear+1
			</isEqual>
			<isEqual property="selectAge" compareValue="40">
				and EXTRACT(YEAR
				FROM SYSDATE)-d.birthyear+1 > 39
			</isEqual>
			<isEqual property="selectItem" compareValue="bbs_add_count">
				ORDER BY
				ADD_COUNT DESC
			</isEqual>
			<isEqual property="selectItem" compareValue="bbs_hitCount">
				ORDER BY
				a.bbs_hitCount DESC
			</isEqual>
			<isEqual property="selectItem" compareValue="goodCount">
				ORDER BY
				a.goodCount DESC
			</isEqual>
		</dynamic>

	</select>



   <!-- 관심있는 이야기 댓글작성한것 / 좋아요누른것 / 본것 -->
   <select id="bbsInterestView" resultClass="bbsView"  parameterClass="bbsView">
      <dynamic> <!-- 댓글작성한 것 가져오기 완료 / 비공개 글은 가져오지 않음.-->
         <isEqual property="selectInt" compareValue="bbs_add_count">
            select a.bbs_seq, a.bbs_contents, a.bbs_hitcount, a.bg_img_seq, a.goodcount,
            case
            when nvl(a.bbs_file_seq,0) != 0
            then (select path from bbs d, bbs_file e where d.bbs_file_seq = e.bbs_file_seq and a.bbs_seq = d.bbs_seq)
            when nvl(a.bbs_file_seq,0) = 0
            then (select path from bbs f,   background_img g where f.bg_img_seq = g.bg_img_seq and a.bbs_seq = f.bbs_seq)
            end as path,
            case
            when nvl(a.bbs_file_seq,0) != 0
            then (select save_name from bbs c, bbs_file d where c.bbs_file_seq = d.bbs_file_seq
            and a.bbs_seq = c.bbs_seq)
            when nvl(a.bbs_file_seq,0) = 0
            then (select save_name from bbs e, background_img f where e.bg_img_seq =
            f.bg_img_seq and a.bbs_seq = e.bbs_seq)
            end as save_name,
            nvl(d.add_count,0) add_count,d.reg_email , nvl(y.bbs_good_yn,'N') bbs_good_yn
        
        
            from bbs a, background_img b,
            (select distinct bbs_seq from bbs_add) c,
            (SELECT BBS_SEQ,reg_email, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY BBS_SEQ,reg_email ) d ,
        (select distinct bbs_seq, bbs_good_yn from yn_filter where members_seq =
        (select members_seq from members where email=#reg_email#)) y
        
        
            where
            a.bg_img_seq = b.bg_img_seq and a.bbs_seq = c.bbs_seq 
            and A.BBS_SEQ = d.BBS_SEQ and d.reg_email=#reg_email# and a.dispyn = 'Y' and y.bbs_seq(+) = a.bbs_seq
            order by a.bbs_seq desc
         </isEqual>
         
         
         <isEqual property="selectInt" compareValue="bbs_like">
            select a.bbs_seq, a.bbs_contents, a.bbs_hitcount, a.bg_img_seq, a.goodcount,
            case
            when nvl(a.bbs_file_seq,0) != 0
            then (select path from bbs d, bbs_file e where d.bbs_file_seq = e.bbs_file_seq and a.bbs_seq = d.bbs_seq)
            when nvl(a.bbs_file_seq,0) = 0
            then (select path from bbs f,   background_img g where f.bg_img_seq = g.bg_img_seq and a.bbs_seq = f.bbs_seq)
            end as path,
            case
            when nvl(a.bbs_file_seq,0) != 0
            then (select save_name from bbs c, bbs_file d where c.bbs_file_seq = d.bbs_file_seq
            and a.bbs_seq = c.bbs_seq)
            when nvl(a.bbs_file_seq,0) = 0
            then (select save_name from bbs e, background_img f where e.bg_img_seq =
            f.bg_img_seq and a.bbs_seq = e.bbs_seq)
            end as save_name,
            nvl(d.add_count,0) add_count,d.reg_email , nvl(y.bbs_good_yn,'N') bbs_good_yn
        
        
            from bbs a, background_img b,
            (select distinct bbs_seq from bbs_add) c,
            (SELECT BBS_SEQ,reg_email, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY BBS_SEQ,reg_email ) d ,
        (select distinct bbs_seq, bbs_good_yn from yn_filter where members_seq =
        (select members_seq from members where email=#reg_email#)) y
        
        
            where
            a.bg_img_seq = b.bg_img_seq and a.bbs_seq = c.bbs_seq 
            and A.BBS_SEQ = d.BBS_SEQ and d.reg_email=#reg_email# and a.dispyn = 'Y' and y.bbs_seq(+) = a.bbs_seq
            and y.bbs_good_yn = 'Y'
            order by a.bbs_seq desc
         </isEqual>
         
         
         <isEqual property="selectInt" compareValue="viewed">
            SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.REG_EMAIL, A.BBS_HITCOUNT, A.GOODCOUNT, A.MEMBERS_SEQ, 
nvl(b.add_count,0) add_count, 
case 
when nvl(a.bbs_file_seq,0) != 0
then (select path from bbs d, bbs_file e where d.bbs_file_seq = e.bbs_file_seq and a.bbs_seq = d.bbs_seq)
when nvl(a.bbs_file_seq,0) = 0
then (select path from bbs f, background_img g where f.bg_img_seq = g.bg_img_seq and a.bbs_seq = f.bbs_seq)
end as path,
case 
when nvl(a.bbs_file_seq,0) != 0
then (select save_name from bbs c, bbs_file d where c.bbs_file_seq = d.bbs_file_seq and a.bbs_seq = c.bbs_seq)
when nvl(a.bbs_file_seq,0) = 0
then (select save_name from bbs e, background_img f where e.bg_img_seq = f.bg_img_seq and a.bbs_seq = e.bbs_seq)
end as save_name, nvl(y.bbs_good_yn,'N') bbs_good_yn

FROM BBS A, (SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY BBS_SEQ ) B, 
(select distinct bbs_seq, bbs_good_yn from yn_filter where members_seq =
(select members_seq from members where email=#reg_email#)) y
WHERE A.BBS_SEQ = B.BBS_SEQ(+) AND A.DISPYN='Y' and y.bbs_seq = a.bbs_seq
         </isEqual>
      
         
      </dynamic>
   </select>

   <select id="bbsMainList" resultClass="bbsView" parameterClass="bbsView">
SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.REG_EMAIL, A.BBS_HITCOUNT, A.GOODCOUNT, A.MEMBERS_SEQ, 
nvl(b.add_count,0) add_count, 
case 
when nvl(a.bbs_file_seq,0) != 0
then (select path from bbs d, bbs_file e where d.bbs_file_seq = e.bbs_file_seq and a.bbs_seq = d.bbs_seq)
when nvl(a.bbs_file_seq,0) = 0
then (select path from bbs f, background_img g where f.bg_img_seq = g.bg_img_seq and a.bbs_seq = f.bbs_seq)
end as path,
case 
when nvl(a.bbs_file_seq,0) != 0
then (select save_name from bbs c, bbs_file d where c.bbs_file_seq = d.bbs_file_seq and a.bbs_seq = c.bbs_seq)
when nvl(a.bbs_file_seq,0) = 0
then (select save_name from bbs e, background_img f where e.bg_img_seq = f.bg_img_seq and a.bbs_seq = e.bbs_seq)
end as save_name, nvl(y.bbs_good_yn,'N') bbs_good_yn

FROM BBS A, (SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY BBS_SEQ ) B, BACKGROUND_IMG C, (select distinct bbs_seq, bbs_good_yn from yn_filter where members_seq =(select members_seq from members where email=#reg_email#)) y
WHERE A.BBS_SEQ = B.BBS_SEQ(+) AND A.DISPYN='Y'AND A.BG_IMG_SEQ = C.BG_IMG_SEQ and y.bbs_seq(+) = a.bbs_seq
ORDER BY A.BBS_SEQ DESC
   </select>





	<!-- 글공감 Like Update 처리 -->


	<!-- 모바일~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~` -->

	<!-- 형준이가 사용했어요~!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -->

	<select id="m_bbsViewList" resultClass="bbsView">
		select *
		from (
		SELECT
		A.BBS_SEQ, A.BG_IMG_SEQ, SUBSTR(A.BBS_CONTENTS, 0, 10)||'...'
		BBS_CONTENTS, A.BBS_HITCOUNT, A.GOODCOUNT,
		A.REG_EMAIL, B.PATH,
		B.SAVE_NAME
		FROM BBS A, BACKGROUND_IMG B
		WHERE A.DISPYN='Y'AND
		A.BG_IMG_SEQ = B.BG_IMG_SEQ
		ORDER BY A.BBS_SEQ DESC
		)
		where 20 >= ROWNUM
	</select>

	<!-- 인기 있는 이야기 -->
	<select id="m_bbsTopStoriesList" resultClass="bbsView">

		select *
		from(
            SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.BBS_HITCOUNT,
            A.REG_EMAIL, 
            case
            when nvl(a.bbs_file_seq,0) != 0
            then (select path from bbs d, bbs_file e where d.bbs_file_seq = e.bbs_file_seq and a.bbs_seq = d.bbs_seq)
            when nvl(a.bbs_file_seq,0) = 0
            then (select path from bbs f,   background_img g where f.bg_img_seq = g.bg_img_seq and a.bbs_seq = f.bbs_seq)
            end as path,
            case
            when nvl(a.bbs_file_seq,0) != 0
            then (select save_name from bbs c, bbs_file d where c.bbs_file_seq = d.bbs_file_seq
            and a.bbs_seq = c.bbs_seq)
            when nvl(a.bbs_file_seq,0) = 0
            then (select save_name from bbs e, background_img f where e.bg_img_seq =
            f.bg_img_seq and a.bbs_seq = e.bbs_seq)
            end as save_name
            , A.GOODCOUNT, nvl(c.add_count,0)
            add_count
            FROM BBS A,(SELECT BBS_SEQ, COUNT(*) ADD_COUNT FROM
            BBS_ADD GROUP BY BBS_SEQ ) c
            WHERE A.DISPYN='Y'AND  a.bbs_seq =
            c.bbs_seq(+) and a.bbs_hitcount != 0
            ORDER BY a.bbs_hitcount DESC
            )
		where 20 >= ROWNUM
	</select>

	<!-- 관심 잇는 이야기  -->
	<select id="m_bbsinterestList" resultClass="bbsView"  parameterClass="java.lang.String">

		select *
		from(
            select a.bbs_seq, a.bbs_contents, a.bbs_hitcount, a.bg_img_seq, a.goodcount,
            case
            when nvl(a.bbs_file_seq,0) != 0
            then (select path from bbs d, bbs_file e where d.bbs_file_seq = e.bbs_file_seq and a.bbs_seq = d.bbs_seq)
            when nvl(a.bbs_file_seq,0) = 0
            then (select path from bbs f,   background_img g where f.bg_img_seq = g.bg_img_seq and a.bbs_seq = f.bbs_seq)
            end as path,
            case
            when nvl(a.bbs_file_seq,0) != 0
            then (select save_name from bbs c, bbs_file d where c.bbs_file_seq = d.bbs_file_seq
            and a.bbs_seq = c.bbs_seq)
            when nvl(a.bbs_file_seq,0) = 0
            then (select save_name from bbs e, background_img f where e.bg_img_seq =
            f.bg_img_seq and a.bbs_seq = e.bbs_seq)
            end as save_name,
            nvl(d.add_count,0) add_count,d.reg_email , nvl(y.bbs_good_yn,'N') bbs_good_yn
        
        
            from bbs a, background_img b,
            (select distinct bbs_seq from bbs_add) c,
            (SELECT BBS_SEQ,reg_email, COUNT(*) ADD_COUNT FROM BBS_ADD GROUP BY BBS_SEQ,reg_email ) d ,
        (select distinct bbs_seq, bbs_good_yn from yn_filter where members_seq =
        (select members_seq from members where email=#reg_email#)) y
        
        
            where
            a.bg_img_seq = b.bg_img_seq and a.bbs_seq = c.bbs_seq 
            and A.BBS_SEQ = d.BBS_SEQ and d.reg_email=#reg_email# and a.dispyn = 'Y' and y.bbs_seq(+) = a.bbs_seq
            order by a.bbs_seq desc
            )
		where 20 >= ROWNUM
	</select>

	<select id="m_myBbsList" resultClass="bbsView" parameterClass="bbsView">
		select *
		from (
		SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS,
		A.BBS_HITCOUNT, A.GOODCOUNT,
		A.REG_EMAIL, B.PATH, B.SAVE_NAME, A.DISPYN
		FROM BBS A, BACKGROUND_IMG B
		WHERE A.REG_EMAIL=#reg_email# AND
		A.BG_IMG_SEQ = B.BG_IMG_SEQ
		ORDER BY A.BBS_SEQ DESC
		)
		where 20 >= ROWNUM
	</select>

	<select id="m_bbsinit" resultClass="bbsView" parameterClass="bbsView">
		SELECT A.BBS_SEQ, A.BG_IMG_SEQ, A.BBS_CONTENTS, A.BBS_HITCOUNT,
		A.GOODCOUNT, A.REG_EMAIL, B.PATH, B.SAVE_NAME
		FROM BBS A,
		BACKGROUND_IMG B
		WHERE A.DISPYN='Y'AND A.BG_IMG_SEQ = B.BG_IMG_SEQ AND
		A.BBS_SEQ = #bbs_seq#
	</select>


	<update id="myStoryDispY" parameterClass="bbsView">
		UPDATE BBS SET
		DISPYN =
		'Y'
		WHERE BBS_SEQ = #bbs_seq#
	</update>

	<update id="myStoryDispN" parameterClass="bbsView">
		UPDATE BBS SET
		DISPYN =
		'N'
		WHERE BBS_SEQ = #bbs_seq#
	</update>

	<!-- 마이스토리 비공개->공개 클로버 확인 -->
	<select id="cloverCheck" resultClass="cloverCheck"
		parameterClass="cloverCheck">
		SELECT EMAIL, USECLOVER
		FROM MEMBERS
		WHERE EMAIL = #reg_email#
	</select>

	<!-- 마이스토리 비공개->공개 업로드 -->
	<update id="dispUpload" parameterClass="bbsView">
		update BBS SET DISPYN
		='Y'
		WHERE BBS_SEQ = #bbs_seq#
	</update>

	<!-- 마이스토리 비공개->공개시 클로버 차감 -->
	<update id="cloverUpload" parameterClass="cloverCheck">
		update MEMBERS SET USECLOVER = (USECLOVER - 3)
		WHERE EMAIL = #reg_email#
	</update>

	<!-- 마이스토리 공개->비공개 업로드 -->
	<update id="dispUploadCencle" parameterClass="bbsView">
		update BBS SET DISPYN ='N'
		WHERE BBS_SEQ = #bbs_seq#
	</update>

	<!-- 마이스토리 비공개->공개 클로버 확인 -->
	<select id="myCloverView" resultClass="cloverCheck"
		parameterClass="java.lang.String">
		SELECT CLOVER, USECLOVER
		FROM MEMBERS
		WHERE EMAIL = #reg_email#
	</select>
</sqlMap>

